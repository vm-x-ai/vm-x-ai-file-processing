// This file is auto-generated by @hey-api/openapi-ts

import { type Options, getProjects, createProject, deleteProject, getProject, updateProject, uploadIntent, getFiles, searchFiles, deleteFile, getFile, getFileContent, getFileEvaluations, getEvaluations, createEvaluation, getEvaluationsTree, getFilesByEvaluation, deleteEvaluation, updateEvaluation, getEvaluationCategories, createEvaluationCategory, deleteEvaluationCategory, updateEvaluationCategory, getEvaluationsByCategory, similaritySearch, getEvaluationTemplates, createEvaluationTemplate, deleteEvaluationTemplate, updateEvaluationTemplate, healthHealthGet } from '../sdk.gen';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { GetProjectsData, CreateProjectData, CreateProjectError, CreateProjectResponse, DeleteProjectData, DeleteProjectError, GetProjectData, UpdateProjectData, UpdateProjectError, UpdateProjectResponse, UploadIntentData, UploadIntentError, UploadIntentResponse2, GetFilesData, SearchFilesData, SearchFilesError, SearchFilesResponse, DeleteFileData, DeleteFileError, GetFileData, GetFileContentData, GetFileEvaluationsData, GetEvaluationsData, CreateEvaluationData, CreateEvaluationError, CreateEvaluationResponse, GetEvaluationsTreeData, GetFilesByEvaluationData, DeleteEvaluationData, DeleteEvaluationError, UpdateEvaluationData, UpdateEvaluationError, UpdateEvaluationResponse, GetEvaluationCategoriesData, CreateEvaluationCategoryData, CreateEvaluationCategoryError, CreateEvaluationCategoryResponse, DeleteEvaluationCategoryData, DeleteEvaluationCategoryError, UpdateEvaluationCategoryData, UpdateEvaluationCategoryError, UpdateEvaluationCategoryResponse, GetEvaluationsByCategoryData, SimilaritySearchData, SimilaritySearchError, SimilaritySearchResponse, GetEvaluationTemplatesData, CreateEvaluationTemplateData, CreateEvaluationTemplateError, CreateEvaluationTemplateResponse, DeleteEvaluationTemplateData, DeleteEvaluationTemplateError, UpdateEvaluationTemplateData, UpdateEvaluationTemplateError, UpdateEvaluationTemplateResponse, HealthHealthGetData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getProjectsQueryKey = (options?: Options<GetProjectsData>) => createQueryKey('getProjects', options);

/**
 * Get Projects
 * Get all projects
 */
export const getProjectsOptions = (options?: Options<GetProjectsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getProjects({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProjectsQueryKey(options)
    });
};

export const createProjectQueryKey = (options: Options<CreateProjectData>) => createQueryKey('createProject', options);

/**
 * Create Project
 * Create a project
 */
export const createProjectOptions = (options: Options<CreateProjectData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createProject({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createProjectQueryKey(options)
    });
};

/**
 * Create Project
 * Create a project
 */
export const createProjectMutation = (options?: Partial<Options<CreateProjectData>>): UseMutationOptions<CreateProjectResponse, CreateProjectError, Options<CreateProjectData>> => {
    const mutationOptions: UseMutationOptions<CreateProjectResponse, CreateProjectError, Options<CreateProjectData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createProject({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Project
 * Delete a project by id
 */
export const deleteProjectMutation = (options?: Partial<Options<DeleteProjectData>>): UseMutationOptions<unknown, DeleteProjectError, Options<DeleteProjectData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteProjectError, Options<DeleteProjectData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteProject({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getProjectQueryKey = (options: Options<GetProjectData>) => createQueryKey('getProject', options);

/**
 * Get Project
 * Get a project by id
 */
export const getProjectOptions = (options: Options<GetProjectData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getProject({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProjectQueryKey(options)
    });
};

/**
 * Update Project
 * Update a project by id
 */
export const updateProjectMutation = (options?: Partial<Options<UpdateProjectData>>): UseMutationOptions<UpdateProjectResponse, UpdateProjectError, Options<UpdateProjectData>> => {
    const mutationOptions: UseMutationOptions<UpdateProjectResponse, UpdateProjectError, Options<UpdateProjectData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateProject({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const uploadIntentQueryKey = (options: Options<UploadIntentData>) => createQueryKey('uploadIntent', options);

/**
 * Upload Intent
 * Upload an intent for a project
 */
export const uploadIntentOptions = (options: Options<UploadIntentData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await uploadIntent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: uploadIntentQueryKey(options)
    });
};

/**
 * Upload Intent
 * Upload an intent for a project
 */
export const uploadIntentMutation = (options?: Partial<Options<UploadIntentData>>): UseMutationOptions<UploadIntentResponse2, UploadIntentError, Options<UploadIntentData>> => {
    const mutationOptions: UseMutationOptions<UploadIntentResponse2, UploadIntentError, Options<UploadIntentData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await uploadIntent({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getFilesQueryKey = (options: Options<GetFilesData>) => createQueryKey('getFiles', options);

/**
 * Get Files
 * Get all files for a project
 */
export const getFilesOptions = (options: Options<GetFilesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getFiles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getFilesQueryKey(options)
    });
};

export const searchFilesQueryKey = (options: Options<SearchFilesData>) => createQueryKey('searchFiles', options);

/**
 * Search Files
 * Search files for a project
 */
export const searchFilesOptions = (options: Options<SearchFilesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await searchFiles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: searchFilesQueryKey(options)
    });
};

/**
 * Search Files
 * Search files for a project
 */
export const searchFilesMutation = (options?: Partial<Options<SearchFilesData>>): UseMutationOptions<SearchFilesResponse, SearchFilesError, Options<SearchFilesData>> => {
    const mutationOptions: UseMutationOptions<SearchFilesResponse, SearchFilesError, Options<SearchFilesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await searchFiles({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete File
 * Delete a file by project and file id
 */
export const deleteFileMutation = (options?: Partial<Options<DeleteFileData>>): UseMutationOptions<unknown, DeleteFileError, Options<DeleteFileData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteFileError, Options<DeleteFileData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteFile({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getFileQueryKey = (options: Options<GetFileData>) => createQueryKey('getFile', options);

/**
 * Get File
 * Get a file by project and file id
 */
export const getFileOptions = (options: Options<GetFileData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getFile({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getFileQueryKey(options)
    });
};

export const getFileContentQueryKey = (options: Options<GetFileContentData>) => createQueryKey('getFileContent', options);

/**
 * Get File Content
 * Get a file content by project and file id
 */
export const getFileContentOptions = (options: Options<GetFileContentData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getFileContent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getFileContentQueryKey(options)
    });
};

export const getFileEvaluationsQueryKey = (options: Options<GetFileEvaluationsData>) => createQueryKey('getFileEvaluations', options);

/**
 * Get File Evaluations
 * Get all evaluations for a file
 */
export const getFileEvaluationsOptions = (options: Options<GetFileEvaluationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getFileEvaluations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getFileEvaluationsQueryKey(options)
    });
};

export const getEvaluationsQueryKey = (options: Options<GetEvaluationsData>) => createQueryKey('getEvaluations', options);

/**
 * Get Evaluations
 * Get all evaluations for a project
 */
export const getEvaluationsOptions = (options: Options<GetEvaluationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getEvaluations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getEvaluationsQueryKey(options)
    });
};

export const createEvaluationQueryKey = (options: Options<CreateEvaluationData>) => createQueryKey('createEvaluation', options);

/**
 * Create Evaluation
 * Create an evaluation for a project
 */
export const createEvaluationOptions = (options: Options<CreateEvaluationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createEvaluation({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createEvaluationQueryKey(options)
    });
};

/**
 * Create Evaluation
 * Create an evaluation for a project
 */
export const createEvaluationMutation = (options?: Partial<Options<CreateEvaluationData>>): UseMutationOptions<CreateEvaluationResponse, CreateEvaluationError, Options<CreateEvaluationData>> => {
    const mutationOptions: UseMutationOptions<CreateEvaluationResponse, CreateEvaluationError, Options<CreateEvaluationData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createEvaluation({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getEvaluationsTreeQueryKey = (options: Options<GetEvaluationsTreeData>) => createQueryKey('getEvaluationsTree', options);

/**
 * Get Evaluations Tree
 * Get all evaluations for a project
 */
export const getEvaluationsTreeOptions = (options: Options<GetEvaluationsTreeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getEvaluationsTree({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getEvaluationsTreeQueryKey(options)
    });
};

export const getFilesByEvaluationQueryKey = (options: Options<GetFilesByEvaluationData>) => createQueryKey('getFilesByEvaluation', options);

/**
 * Get Files By Evaluation
 * Get all files for an evaluation
 */
export const getFilesByEvaluationOptions = (options: Options<GetFilesByEvaluationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getFilesByEvaluation({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getFilesByEvaluationQueryKey(options)
    });
};

/**
 * Delete Evaluation
 * Delete an evaluation by project and evaluation id
 */
export const deleteEvaluationMutation = (options?: Partial<Options<DeleteEvaluationData>>): UseMutationOptions<unknown, DeleteEvaluationError, Options<DeleteEvaluationData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteEvaluationError, Options<DeleteEvaluationData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteEvaluation({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update Evaluation
 * Update an evaluation for a project
 */
export const updateEvaluationMutation = (options?: Partial<Options<UpdateEvaluationData>>): UseMutationOptions<UpdateEvaluationResponse, UpdateEvaluationError, Options<UpdateEvaluationData>> => {
    const mutationOptions: UseMutationOptions<UpdateEvaluationResponse, UpdateEvaluationError, Options<UpdateEvaluationData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateEvaluation({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getEvaluationCategoriesQueryKey = (options: Options<GetEvaluationCategoriesData>) => createQueryKey('getEvaluationCategories', options);

/**
 * Get Evaluation Categories
 * Get all evaluation categories for a project
 */
export const getEvaluationCategoriesOptions = (options: Options<GetEvaluationCategoriesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getEvaluationCategories({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getEvaluationCategoriesQueryKey(options)
    });
};

export const createEvaluationCategoryQueryKey = (options: Options<CreateEvaluationCategoryData>) => createQueryKey('createEvaluationCategory', options);

/**
 * Create Evaluation Category
 * Create an evaluation category for a project
 */
export const createEvaluationCategoryOptions = (options: Options<CreateEvaluationCategoryData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createEvaluationCategory({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createEvaluationCategoryQueryKey(options)
    });
};

/**
 * Create Evaluation Category
 * Create an evaluation category for a project
 */
export const createEvaluationCategoryMutation = (options?: Partial<Options<CreateEvaluationCategoryData>>): UseMutationOptions<CreateEvaluationCategoryResponse, CreateEvaluationCategoryError, Options<CreateEvaluationCategoryData>> => {
    const mutationOptions: UseMutationOptions<CreateEvaluationCategoryResponse, CreateEvaluationCategoryError, Options<CreateEvaluationCategoryData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createEvaluationCategory({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Evaluation Category
 * Delete an evaluation category for a project
 */
export const deleteEvaluationCategoryMutation = (options?: Partial<Options<DeleteEvaluationCategoryData>>): UseMutationOptions<unknown, DeleteEvaluationCategoryError, Options<DeleteEvaluationCategoryData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteEvaluationCategoryError, Options<DeleteEvaluationCategoryData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteEvaluationCategory({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update Evaluation Category
 * Update an evaluation category for a project
 */
export const updateEvaluationCategoryMutation = (options?: Partial<Options<UpdateEvaluationCategoryData>>): UseMutationOptions<UpdateEvaluationCategoryResponse, UpdateEvaluationCategoryError, Options<UpdateEvaluationCategoryData>> => {
    const mutationOptions: UseMutationOptions<UpdateEvaluationCategoryResponse, UpdateEvaluationCategoryError, Options<UpdateEvaluationCategoryData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateEvaluationCategory({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getEvaluationsByCategoryQueryKey = (options: Options<GetEvaluationsByCategoryData>) => createQueryKey('getEvaluationsByCategory', options);

/**
 * Get Evaluations By Category
 * Get all evaluations for a specific category
 */
export const getEvaluationsByCategoryOptions = (options: Options<GetEvaluationsByCategoryData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getEvaluationsByCategory({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getEvaluationsByCategoryQueryKey(options)
    });
};

export const similaritySearchQueryKey = (options: Options<SimilaritySearchData>) => createQueryKey('similaritySearch', options);

/**
 * Similarity Search
 * Perform a similarity search
 */
export const similaritySearchOptions = (options: Options<SimilaritySearchData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await similaritySearch({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: similaritySearchQueryKey(options)
    });
};

/**
 * Similarity Search
 * Perform a similarity search
 */
export const similaritySearchMutation = (options?: Partial<Options<SimilaritySearchData>>): UseMutationOptions<SimilaritySearchResponse, SimilaritySearchError, Options<SimilaritySearchData>> => {
    const mutationOptions: UseMutationOptions<SimilaritySearchResponse, SimilaritySearchError, Options<SimilaritySearchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await similaritySearch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getEvaluationTemplatesQueryKey = (options: Options<GetEvaluationTemplatesData>) => createQueryKey('getEvaluationTemplates', options);

/**
 * Get Evaluation Templates
 * Get all evaluation templates for a project
 */
export const getEvaluationTemplatesOptions = (options: Options<GetEvaluationTemplatesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getEvaluationTemplates({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getEvaluationTemplatesQueryKey(options)
    });
};

export const createEvaluationTemplateQueryKey = (options: Options<CreateEvaluationTemplateData>) => createQueryKey('createEvaluationTemplate', options);

/**
 * Create Evaluation Template
 * Create an evaluation template for a project
 */
export const createEvaluationTemplateOptions = (options: Options<CreateEvaluationTemplateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createEvaluationTemplate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createEvaluationTemplateQueryKey(options)
    });
};

/**
 * Create Evaluation Template
 * Create an evaluation template for a project
 */
export const createEvaluationTemplateMutation = (options?: Partial<Options<CreateEvaluationTemplateData>>): UseMutationOptions<CreateEvaluationTemplateResponse, CreateEvaluationTemplateError, Options<CreateEvaluationTemplateData>> => {
    const mutationOptions: UseMutationOptions<CreateEvaluationTemplateResponse, CreateEvaluationTemplateError, Options<CreateEvaluationTemplateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createEvaluationTemplate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Evaluation Template
 * Delete an evaluation template by project and evaluation template id
 */
export const deleteEvaluationTemplateMutation = (options?: Partial<Options<DeleteEvaluationTemplateData>>): UseMutationOptions<unknown, DeleteEvaluationTemplateError, Options<DeleteEvaluationTemplateData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteEvaluationTemplateError, Options<DeleteEvaluationTemplateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteEvaluationTemplate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update Evaluation Template
 * Update an evaluation template for a project
 */
export const updateEvaluationTemplateMutation = (options?: Partial<Options<UpdateEvaluationTemplateData>>): UseMutationOptions<UpdateEvaluationTemplateResponse, UpdateEvaluationTemplateError, Options<UpdateEvaluationTemplateData>> => {
    const mutationOptions: UseMutationOptions<UpdateEvaluationTemplateResponse, UpdateEvaluationTemplateError, Options<UpdateEvaluationTemplateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateEvaluationTemplate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const healthHealthGetQueryKey = (options?: Options<HealthHealthGetData>) => createQueryKey('healthHealthGet', options);

/**
 * Health
 */
export const healthHealthGetOptions = (options?: Options<HealthHealthGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await healthHealthGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: healthHealthGetQueryKey(options)
    });
};