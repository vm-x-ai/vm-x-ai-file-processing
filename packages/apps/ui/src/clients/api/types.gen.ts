// This file is auto-generated by @hey-api/openapi-ts

/**
 * ErrorResponse
 */
export type ErrorResponse = {
  /**
   * Message
   */
  message: string;
};

/**
 * EvaluationCategoryRead
 */
export type EvaluationCategoryRead = {
  /**
   * Name
   */
  name: string;
  /**
   * Description
   */
  description: string | null;
  /**
   * Project Id
   */
  project_id: string;
  /**
   * Id
   */
  id: string;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
};

/**
 * EvaluationCategoryWithEvaluations
 */
export type EvaluationCategoryWithEvaluations = {
  /**
   * Name
   */
  name: string;
  /**
   * Description
   */
  description: string | null;
  /**
   * Project Id
   */
  project_id: string;
  /**
   * Id
   */
  id: string;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
  /**
   * Evaluations
   */
  evaluations: Array<EvaluationRead>;
};

/**
 * EvaluationRead
 */
export type EvaluationRead = {
  /**
   * Title
   */
  title: string;
  /**
   * Description
   */
  description: string;
  /**
   * System Prompt
   */
  system_prompt: string | null;
  /**
   * Prompt
   */
  prompt: string;
  /**
   * Project Id
   */
  project_id: string;
  evaluation_type: EvaluationType;
  /**
   * Evaluation Options
   */
  evaluation_options: Array<string> | null;
  /**
   * Parent Evaluation Id
   */
  parent_evaluation_id: string | null;
  /**
   * Parent Evaluation Option
   */
  parent_evaluation_option: string | null;
  /**
   * Category Id
   */
  category_id: string;
  /**
   * Template Id
   */
  template_id: string | null;
  /**
   * Id
   */
  id: string;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
};

/**
 * EvaluationTemplateRead
 */
export type EvaluationTemplateRead = {
  /**
   * Name
   */
  name: string;
  /**
   * Description
   */
  description: string;
  /**
   * Project Id
   */
  project_id: string;
  /**
   * System Prompt
   */
  system_prompt: string | null;
  /**
   * Prompt
   */
  prompt: string;
  /**
   * Category Id
   */
  category_id: string;
  /**
   * Default
   */
  default?: boolean;
  /**
   * Id
   */
  id: string;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
};

/**
 * EvaluationTree
 */
export type EvaluationTree = {
  /**
   * Title
   */
  title: string;
  /**
   * Description
   */
  description: string;
  /**
   * System Prompt
   */
  system_prompt: string | null;
  /**
   * Prompt
   */
  prompt: string;
  /**
   * Project Id
   */
  project_id: string;
  evaluation_type: EvaluationType;
  /**
   * Evaluation Options
   */
  evaluation_options: Array<string> | null;
  /**
   * Parent Evaluation Id
   */
  parent_evaluation_id: string | null;
  /**
   * Parent Evaluation Option
   */
  parent_evaluation_option: string | null;
  /**
   * Category Id
   */
  category_id: string;
  /**
   * Template Id
   */
  template_id: string | null;
  /**
   * Id
   */
  id: string;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
  /**
   * Children
   */
  children?: Array<EvaluationTree>;
};

/**
 * EvaluationType
 */
export type EvaluationType = 'enum_choice' | 'text' | 'boolean';

/**
 * FileContentRead
 */
export type FileContentRead = {
  /**
   * File Id
   */
  file_id: string;
  /**
   * Content Number
   */
  content_number: number;
  /**
   * Content Metadata
   */
  content_metadata: {
    [key: string]: unknown;
  };
  /**
   * Content
   */
  content: string;
  /**
   * Id
   */
  id: string;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
};

/**
 * FileContentReadWithChunkScore
 */
export type FileContentReadWithChunkScore = {
  /**
   * File Id
   */
  file_id: string;
  /**
   * Content Number
   */
  content_number: number;
  /**
   * Content Metadata
   */
  content_metadata: {
    [key: string]: unknown;
  };
  /**
   * Content
   */
  content: string;
  /**
   * Id
   */
  id: string;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
  /**
   * Match Chunks
   */
  match_chunks?: Array<FileEmbeddingRead> | null;
  /**
   * Before Neighbors
   */
  before_neighbors?: Array<FileContentRead> | null;
  /**
   * After Neighbors
   */
  after_neighbors?: Array<FileContentRead> | null;
};

/**
 * FileEmbeddingRead
 */
export type FileEmbeddingRead = {
  /**
   * File Id
   */
  file_id: string;
  /**
   * Chunk Number
   */
  chunk_number: number;
  /**
   * Chunk Metadata
   */
  chunk_metadata: {
    [key: string]: unknown;
  };
  /**
   * Project Id
   */
  project_id: string;
  /**
   * Content Id
   */
  content_id: string;
  /**
   * Content
   */
  content: string;
  /**
   * Embedding
   */
  embedding: unknown | null;
  status?: FileEmbeddingStatus;
  /**
   * Id
   */
  id: string;
  /**
   * Score
   */
  score?: number | null;
  /**
   * Before Neighbors
   */
  before_neighbors?: Array<FileEmbeddingRead> | null;
  /**
   * After Neighbors
   */
  after_neighbors?: Array<FileEmbeddingRead> | null;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
};

/**
 * FileEmbeddingStatus
 */
export type FileEmbeddingStatus = 'CHUNKED' | 'EMBEDDED';

/**
 * FileEvaluationReadWithEvaluation
 */
export type FileEvaluationReadWithEvaluation = {
  /**
   * File Id
   */
  file_id: string;
  /**
   * Evaluation Id
   */
  evaluation_id: string;
  /**
   * Content Id
   */
  content_id: string;
  /**
   * Response
   */
  response: string;
  status?: FileEvaluationStatus;
  /**
   * Error
   */
  error?: string | null;
  /**
   * Llm Request
   */
  llm_request?: {
    [key: string]: unknown;
  } | null;
  /**
   * Llm Response
   */
  llm_response?: {
    [key: string]: unknown;
  } | null;
  /**
   * Id
   */
  id: string;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
  evaluation: EvaluationRead;
  content: FileContentRead;
};

/**
 * FileEvaluationReadWithFile
 */
export type FileEvaluationReadWithFile = {
  /**
   * File Id
   */
  file_id: string;
  /**
   * Evaluation Id
   */
  evaluation_id: string;
  /**
   * Content Id
   */
  content_id: string;
  /**
   * Response
   */
  response: string;
  status?: FileEvaluationStatus;
  /**
   * Error
   */
  error?: string | null;
  /**
   * Llm Request
   */
  llm_request?: {
    [key: string]: unknown;
  } | null;
  /**
   * Llm Response
   */
  llm_response?: {
    [key: string]: unknown;
  } | null;
  /**
   * Id
   */
  id: string;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
  file: FileRead;
  evaluation: EvaluationRead;
  content: FileContentRead;
};

/**
 * FileEvaluationStatus
 */
export type FileEvaluationStatus =
  | 'pending'
  | 'processing'
  | 'completed'
  | 'failed';

/**
 * FileRead
 */
export type FileRead = {
  /**
   * Name
   */
  name: string;
  /**
   * Type
   */
  type: string;
  /**
   * Size
   */
  size: number;
  /**
   * Url
   */
  url: string;
  status?: FileStatus;
  /**
   * Error
   */
  error?: string | null;
  /**
   * Project Id
   */
  project_id: string;
  /**
   * Thumbnail Url
   */
  thumbnail_url?: string | null;
  /**
   * Id
   */
  id: string;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
};

/**
 * FileReadWithEvaluations
 */
export type FileReadWithEvaluations = {
  /**
   * Name
   */
  name: string;
  /**
   * Type
   */
  type: string;
  /**
   * Size
   */
  size: number;
  /**
   * Url
   */
  url: string;
  status?: FileStatus;
  /**
   * Error
   */
  error?: string | null;
  /**
   * Project Id
   */
  project_id: string;
  /**
   * Thumbnail Url
   */
  thumbnail_url?: string | null;
  /**
   * Id
   */
  id: string;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
  /**
   * Evaluations
   */
  evaluations: Array<FileEvaluationReadWithEvaluation>;
};

/**
 * FileSearchEvaluation
 */
export type FileSearchEvaluation = {
  /**
   * Evaluation Id
   */
  evaluation_id: string;
  /**
   * Response Value
   */
  response_value?: string | null;
};

/**
 * FileSearchEvaluationGroup
 */
export type FileSearchEvaluationGroup = {
  /**
   * Operation
   */
  operation: 'and' | 'or';
  /**
   * Evaluations
   */
  evaluations: Array<FileSearchEvaluationOperation | FileSearchEvaluationGroup>;
};

/**
 * FileSearchEvaluationOperation
 */
export type FileSearchEvaluationOperation = {
  /**
   * Operation
   */
  operation: 'eq' | 'neq';
  value: FileSearchEvaluation;
};

/**
 * FileSearchRequest
 */
export type FileSearchRequest = {
  /**
   * Search Query
   */
  search_query?: string | null;
  evaluations?: FileSearchEvaluationGroup | null;
};

/**
 * FileStatus
 */
export type FileStatus =
  | 'pending'
  | 'chunking'
  | 'chunked'
  | 'embedding'
  | 'embedded'
  | 'evaluating'
  | 'evaluated'
  | 'completed'
  | 'failed';

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
  /**
   * Detail
   */
  detail?: Array<ValidationError>;
};

/**
 * HttpEvaluationCreate
 */
export type HttpEvaluationCreate = {
  /**
   * Title
   * Title of the evaluation
   */
  title: string;
  /**
   * Description
   * Description of the evaluation
   */
  description: string;
  /**
   * System Prompt
   * System prompt for the evaluation
   */
  system_prompt?: string | null;
  /**
   * Prompt
   * Prompt for the evaluation
   */
  prompt: string;
  /**
   * Type of evaluation
   */
  evaluation_type: EvaluationType;
  /**
   * Evaluation Options
   * Options for enum_choice evaluations
   */
  evaluation_options?: Array<string> | null;
  /**
   * Parent Evaluation Id
   * Parent evaluation ID
   */
  parent_evaluation_id?: string | null;
  /**
   * Parent Evaluation Option
   * Parent evaluation option
   */
  parent_evaluation_option?: string | null;
  /**
   * Template Id
   * Template ID
   */
  template_id?: string | null;
  /**
   * Category Id
   * ID of existing category
   */
  category_id?: string | null;
  /**
   * Category Name
   * Name of new category to create
   */
  category_name?: string | null;
  /**
   * Category Description
   * Description for new category
   */
  category_description?: string | null;
};

/**
 * HttpEvaluationTemplateCreate
 */
export type HttpEvaluationTemplateCreate = {
  /**
   * Name
   */
  name: string;
  /**
   * Description
   */
  description: string;
  /**
   * System Prompt
   * System prompt for the evaluation template
   */
  system_prompt?: string | null;
  /**
   * Prompt
   * Prompt for the evaluation template
   */
  prompt: string;
  /**
   * Default
   * Whether the evaluation template is the default evaluation template within a category
   */
  default?: boolean;
  /**
   * Category Id
   * ID of existing category
   */
  category_id?: string | null;
  /**
   * Category Name
   * Name of new category to create
   */
  category_name?: string | null;
  /**
   * Category Description
   * Description for new category
   */
  category_description?: string | null;
};

/**
 * HttpEvaluationTemplateUpdate
 */
export type HttpEvaluationTemplateUpdate = {
  /**
   * Name
   */
  name: string;
  /**
   * Description
   */
  description: string;
  /**
   * System Prompt
   * System prompt for the evaluation template
   */
  system_prompt?: string | null;
  /**
   * Prompt
   * Prompt for the evaluation template
   */
  prompt: string;
  /**
   * Default
   * Whether the evaluation template is the default evaluation template within a category
   */
  default?: boolean;
  /**
   * Category Id
   * ID of existing category
   */
  category_id?: string | null;
  /**
   * Category Name
   * Name of new category to create
   */
  category_name?: string | null;
  /**
   * Category Description
   * Description for new category
   */
  category_description?: string | null;
};

/**
 * HttpEvaluationUpdate
 */
export type HttpEvaluationUpdate = {
  /**
   * Title
   */
  title: string;
  /**
   * Description
   */
  description: string;
  /**
   * System Prompt
   */
  system_prompt: string | null;
  /**
   * Prompt
   */
  prompt: string;
  /**
   * Project Id
   */
  project_id: string;
  evaluation_type: EvaluationType;
  /**
   * Evaluation Options
   */
  evaluation_options: Array<string> | null;
  /**
   * Parent Evaluation Id
   */
  parent_evaluation_id: string | null;
  /**
   * Parent Evaluation Option
   */
  parent_evaluation_option: string | null;
  /**
   * Category Id
   */
  category_id: string;
  /**
   * Template Id
   */
  template_id: string | null;
};

/**
 * ProjectCreateRequest
 */
export type ProjectCreateRequest = {
  /**
   * Name
   */
  name: string;
  /**
   * Description
   */
  description: string;
};

/**
 * ProjectRead
 */
export type ProjectRead = {
  /**
   * Name
   */
  name: string;
  /**
   * Description
   */
  description: string;
  /**
   * Id
   */
  id: string;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
};

/**
 * ProjectReadWithStats
 */
export type ProjectReadWithStats = {
  /**
   * Name
   */
  name: string;
  /**
   * Description
   */
  description: string;
  /**
   * Id
   */
  id: string;
  /**
   * Created At
   */
  created_at: string;
  /**
   * Updated At
   */
  updated_at: string;
  /**
   * Total Files Count
   */
  total_files_count: number;
  /**
   * Pending Files Count
   */
  pending_files_count: number;
  /**
   * Completed Files Count
   */
  completed_files_count: number;
  /**
   * Failed Files Count
   */
  failed_files_count: number;
  /**
   * Total Size
   */
  total_size: number | null;
  /**
   * Total Evaluations
   */
  total_evaluations: number;
};

/**
 * ProjectUpdateRequest
 */
export type ProjectUpdateRequest = {
  /**
   * Name
   */
  name: string;
  /**
   * Description
   */
  description: string;
};

/**
 * SimilaritySearchOrderBy
 * Fields to order the results by.
 */
export type SimilaritySearchOrderBy = 'score' | 'chunk';

/**
 * SimilaritySearchRequest
 * Request for a similarity search.
 *
 * - query: The query to search for.
 * - limit: The maximum number of results to return.
 * - score_threshold: The minimum score to return a result.
 * - when_match_return: Identifies which type to return when a match is found.
 * (default: chunk)
 * - before_neighbor_count: The number of neighbors to return before the match.
 * (default: 0)
 * - after_neighbor_count: The number of neighbors to return after the match.
 * (default: 0)
 * - order_by: The field to order the results by. (default: chunk)
 *
 * When the before and after neighbor counts are provided with a value greater than 0,
 * when a match is found, it will also return the chunk/content before
 * and after the match.
 */
export type SimilaritySearchRequest = {
  /**
   * Query
   */
  query: string;
  /**
   * Limit
   */
  limit?: number | null;
  /**
   * Score Threshold
   */
  score_threshold?: number | null;
  when_match_return?: SimilaritySearchWhenMatchReturn;
  /**
   * Before Neighbor Count
   */
  before_neighbor_count?: number;
  /**
   * After Neighbor Count
   */
  after_neighbor_count?: number;
  order_by?: SimilaritySearchOrderBy;
  /**
   * File Ids
   */
  file_ids?: Array<string> | null;
};

/**
 * SimilaritySearchWhenMatchReturn
 * Identifies which type to return when a match is found.
 *
 * - CHUNK: The default behavior, return the chunk that was matched.
 * - CONTENT: Return the content related to the matched chunk.
 *
 * Example:
 * When a PDF is uploaded, the langchain loader returns a list of documents,
 * one for each page.
 *
 * The document is stored in the database as a FileContent record.
 * When a user searches for a given query, and the chunk is matched,
 * it will return the entire page.
 */
export type SimilaritySearchWhenMatchReturn = 'chunk' | 'content';

/**
 * UploadIntentRequest
 */
export type UploadIntentRequest = {
  /**
   * File Name
   */
  file_name: string;
  /**
   * File Size
   */
  file_size: number;
};

/**
 * UploadIntentResponse
 */
export type UploadIntentResponse = {
  /**
   * Upload Url
   */
  upload_url: string;
  /**
   * Headers
   */
  headers: {
    [key: string]: string;
  };
  file: FileRead;
};

/**
 * ValidationError
 */
export type ValidationError = {
  /**
   * Location
   */
  loc: Array<string | number>;
  /**
   * Message
   */
  msg: string;
  /**
   * Error Type
   */
  type: string;
};

export type GetProjectsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/projects';
};

export type GetProjectsErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetProjectsError = GetProjectsErrors[keyof GetProjectsErrors];

export type GetProjectsResponses = {
  /**
   * Response Getprojects
   * Successful Response
   */
  200: Array<ProjectReadWithStats>;
};

export type GetProjectsResponse =
  GetProjectsResponses[keyof GetProjectsResponses];

export type CreateProjectData = {
  body: ProjectCreateRequest;
  path?: never;
  query?: never;
  url: '/projects';
};

export type CreateProjectErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type CreateProjectError = CreateProjectErrors[keyof CreateProjectErrors];

export type CreateProjectResponses = {
  /**
   * Successful Response
   */
  200: ProjectRead;
};

export type CreateProjectResponse =
  CreateProjectResponses[keyof CreateProjectResponses];

export type DeleteProjectData = {
  body?: never;
  path: {
    /**
     * Project Id
     */
    project_id: string;
  };
  query?: never;
  url: '/projects/{project_id}';
};

export type DeleteProjectErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type DeleteProjectError = DeleteProjectErrors[keyof DeleteProjectErrors];

export type DeleteProjectResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type GetProjectData = {
  body?: never;
  path: {
    /**
     * Project Id
     */
    project_id: string;
  };
  query?: never;
  url: '/projects/{project_id}';
};

export type GetProjectErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetProjectError = GetProjectErrors[keyof GetProjectErrors];

export type GetProjectResponses = {
  /**
   * Successful Response
   */
  200: ProjectRead;
};

export type GetProjectResponse = GetProjectResponses[keyof GetProjectResponses];

export type UpdateProjectData = {
  body: ProjectUpdateRequest;
  path: {
    /**
     * Project Id
     */
    project_id: string;
  };
  query?: never;
  url: '/projects/{project_id}';
};

export type UpdateProjectErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type UpdateProjectError = UpdateProjectErrors[keyof UpdateProjectErrors];

export type UpdateProjectResponses = {
  /**
   * Successful Response
   */
  200: ProjectRead;
};

export type UpdateProjectResponse =
  UpdateProjectResponses[keyof UpdateProjectResponses];

export type UploadIntentData = {
  body: UploadIntentRequest;
  path: {
    /**
     * Project Id
     */
    project_id: string;
  };
  query?: never;
  url: '/projects/{project_id}/upload-intent';
};

export type UploadIntentErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type UploadIntentError = UploadIntentErrors[keyof UploadIntentErrors];

export type UploadIntentResponses = {
  /**
   * Successful Response
   */
  200: UploadIntentResponse;
};

export type UploadIntentResponse2 =
  UploadIntentResponses[keyof UploadIntentResponses];

export type GetFilesData = {
  body?: never;
  path: {
    /**
     * Project Id
     */
    project_id: string;
  };
  query?: never;
  url: '/projects/{project_id}/files';
};

export type GetFilesErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetFilesError = GetFilesErrors[keyof GetFilesErrors];

export type GetFilesResponses = {
  /**
   * Response Getfiles
   * Successful Response
   */
  200: Array<FileRead>;
};

export type GetFilesResponse = GetFilesResponses[keyof GetFilesResponses];

export type SearchFilesData = {
  body: FileSearchRequest;
  path: {
    /**
     * Project Id
     */
    project_id: string;
  };
  query?: never;
  url: '/projects/{project_id}/files/search';
};

export type SearchFilesErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type SearchFilesError = SearchFilesErrors[keyof SearchFilesErrors];

export type SearchFilesResponses = {
  /**
   * Response Searchfiles
   * Successful Response
   */
  200: Array<FileReadWithEvaluations>;
};

export type SearchFilesResponse =
  SearchFilesResponses[keyof SearchFilesResponses];

export type DeleteFileData = {
  body?: never;
  path: {
    /**
     * Project Id
     */
    project_id: string;
    /**
     * File Id
     */
    file_id: string;
  };
  query?: never;
  url: '/projects/{project_id}/file/{file_id}';
};

export type DeleteFileErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type DeleteFileError = DeleteFileErrors[keyof DeleteFileErrors];

export type DeleteFileResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type GetFileData = {
  body?: never;
  path: {
    /**
     * Project Id
     */
    project_id: string;
    /**
     * File Id
     */
    file_id: string;
  };
  query?: never;
  url: '/projects/{project_id}/file/{file_id}';
};

export type GetFileErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetFileError = GetFileErrors[keyof GetFileErrors];

export type GetFileResponses = {
  /**
   * Successful Response
   */
  200: FileRead;
};

export type GetFileResponse = GetFileResponses[keyof GetFileResponses];

export type GetFileContentData = {
  body?: never;
  path: {
    /**
     * Project Id
     */
    project_id: string;
    /**
     * File Id
     */
    file_id: string;
  };
  query?: {
    /**
     * From Page
     */
    from_page?: number;
    /**
     * To Page
     */
    to_page?: number | null;
  };
  url: '/projects/{project_id}/file/{file_id}/content';
};

export type GetFileContentErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetFileContentError =
  GetFileContentErrors[keyof GetFileContentErrors];

export type GetFileContentResponses = {
  /**
   * Response Getfilecontent
   * Successful Response
   */
  200: Array<FileContentRead>;
};

export type GetFileContentResponse =
  GetFileContentResponses[keyof GetFileContentResponses];

export type GetFileEvaluationsData = {
  body?: never;
  path: {
    /**
     * Project Id
     */
    project_id: string;
    /**
     * File Id
     */
    file_id: string;
  };
  query?: never;
  url: '/projects/{project_id}/file/{file_id}/evaluations';
};

export type GetFileEvaluationsErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetFileEvaluationsError =
  GetFileEvaluationsErrors[keyof GetFileEvaluationsErrors];

export type GetFileEvaluationsResponses = {
  /**
   * Response Getfileevaluations
   * Successful Response
   */
  200: Array<FileEvaluationReadWithFile>;
};

export type GetFileEvaluationsResponse =
  GetFileEvaluationsResponses[keyof GetFileEvaluationsResponses];

export type GetEvaluationsData = {
  body?: never;
  path: {
    /**
     * Project Id
     */
    project_id: string;
  };
  query?: never;
  url: '/projects/{project_id}/evaluations';
};

export type GetEvaluationsErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetEvaluationsError =
  GetEvaluationsErrors[keyof GetEvaluationsErrors];

export type GetEvaluationsResponses = {
  /**
   * Response Getevaluations
   * Successful Response
   */
  200: Array<EvaluationRead>;
};

export type GetEvaluationsResponse =
  GetEvaluationsResponses[keyof GetEvaluationsResponses];

export type CreateEvaluationData = {
  body: HttpEvaluationCreate;
  path: {
    /**
     * Project Id
     */
    project_id: string;
  };
  query?: never;
  url: '/projects/{project_id}/evaluations';
};

export type CreateEvaluationErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type CreateEvaluationError =
  CreateEvaluationErrors[keyof CreateEvaluationErrors];

export type CreateEvaluationResponses = {
  /**
   * Successful Response
   */
  200: EvaluationRead;
};

export type CreateEvaluationResponse =
  CreateEvaluationResponses[keyof CreateEvaluationResponses];

export type GetEvaluationsTreeData = {
  body?: never;
  path: {
    /**
     * Project Id
     */
    project_id: string;
  };
  query?: never;
  url: '/projects/{project_id}/evaluations/tree';
};

export type GetEvaluationsTreeErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetEvaluationsTreeError =
  GetEvaluationsTreeErrors[keyof GetEvaluationsTreeErrors];

export type GetEvaluationsTreeResponses = {
  /**
   * Response Getevaluationstree
   * Successful Response
   */
  200: Array<EvaluationTree>;
};

export type GetEvaluationsTreeResponse =
  GetEvaluationsTreeResponses[keyof GetEvaluationsTreeResponses];

export type GetFilesByEvaluationData = {
  body?: never;
  path: {
    /**
     * Project Id
     */
    project_id: string;
    /**
     * Evaluation Id
     */
    evaluation_id: string;
  };
  query?: {
    /**
     * Option Value
     */
    option_value?: string | null;
  };
  url: '/projects/{project_id}/evaluation/{evaluation_id}/files';
};

export type GetFilesByEvaluationErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetFilesByEvaluationError =
  GetFilesByEvaluationErrors[keyof GetFilesByEvaluationErrors];

export type GetFilesByEvaluationResponses = {
  /**
   * Response Getfilesbyevaluation
   * Successful Response
   */
  200: Array<FileEvaluationReadWithFile>;
};

export type GetFilesByEvaluationResponse =
  GetFilesByEvaluationResponses[keyof GetFilesByEvaluationResponses];

export type DeleteEvaluationData = {
  body?: never;
  path: {
    /**
     * Project Id
     */
    project_id: string;
    /**
     * Evaluation Id
     */
    evaluation_id: string;
  };
  query?: never;
  url: '/projects/{project_id}/evaluations/{evaluation_id}';
};

export type DeleteEvaluationErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type DeleteEvaluationError =
  DeleteEvaluationErrors[keyof DeleteEvaluationErrors];

export type DeleteEvaluationResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type UpdateEvaluationData = {
  body: HttpEvaluationUpdate;
  path: {
    /**
     * Project Id
     */
    project_id: string;
    /**
     * Evaluation Id
     */
    evaluation_id: string;
  };
  query?: never;
  url: '/projects/{project_id}/evaluations/{evaluation_id}';
};

export type UpdateEvaluationErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type UpdateEvaluationError =
  UpdateEvaluationErrors[keyof UpdateEvaluationErrors];

export type UpdateEvaluationResponses = {
  /**
   * Successful Response
   */
  200: EvaluationRead;
};

export type UpdateEvaluationResponse =
  UpdateEvaluationResponses[keyof UpdateEvaluationResponses];

export type GetEvaluationCategoriesData = {
  body?: never;
  path: {
    /**
     * Project Id
     */
    project_id: string;
  };
  query?: {
    /**
     * Has Evaluations
     */
    has_evaluations?: boolean | null;
  };
  url: '/projects/{project_id}/evaluation-categories';
};

export type GetEvaluationCategoriesErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetEvaluationCategoriesError =
  GetEvaluationCategoriesErrors[keyof GetEvaluationCategoriesErrors];

export type GetEvaluationCategoriesResponses = {
  /**
   * Response Getevaluationcategories
   * Successful Response
   */
  200: Array<EvaluationCategoryWithEvaluations>;
};

export type GetEvaluationCategoriesResponse =
  GetEvaluationCategoriesResponses[keyof GetEvaluationCategoriesResponses];

export type CreateEvaluationCategoryData = {
  /**
   * Payload
   */
  body: {
    [key: string]: unknown;
  };
  path: {
    /**
     * Project Id
     */
    project_id: string;
  };
  query?: never;
  url: '/projects/{project_id}/evaluation-categories';
};

export type CreateEvaluationCategoryErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type CreateEvaluationCategoryError =
  CreateEvaluationCategoryErrors[keyof CreateEvaluationCategoryErrors];

export type CreateEvaluationCategoryResponses = {
  /**
   * Successful Response
   */
  200: EvaluationCategoryRead;
};

export type CreateEvaluationCategoryResponse =
  CreateEvaluationCategoryResponses[keyof CreateEvaluationCategoryResponses];

export type DeleteEvaluationCategoryData = {
  body?: never;
  path: {
    /**
     * Project Id
     */
    project_id: string;
    /**
     * Category Id
     */
    category_id: string;
  };
  query?: never;
  url: '/projects/{project_id}/evaluation-categories/{category_id}';
};

export type DeleteEvaluationCategoryErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type DeleteEvaluationCategoryError =
  DeleteEvaluationCategoryErrors[keyof DeleteEvaluationCategoryErrors];

export type DeleteEvaluationCategoryResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type UpdateEvaluationCategoryData = {
  /**
   * Payload
   */
  body: {
    [key: string]: unknown;
  };
  path: {
    /**
     * Project Id
     */
    project_id: string;
    /**
     * Category Id
     */
    category_id: string;
  };
  query?: never;
  url: '/projects/{project_id}/evaluation-categories/{category_id}';
};

export type UpdateEvaluationCategoryErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type UpdateEvaluationCategoryError =
  UpdateEvaluationCategoryErrors[keyof UpdateEvaluationCategoryErrors];

export type UpdateEvaluationCategoryResponses = {
  /**
   * Successful Response
   */
  200: EvaluationCategoryRead;
};

export type UpdateEvaluationCategoryResponse =
  UpdateEvaluationCategoryResponses[keyof UpdateEvaluationCategoryResponses];

export type GetEvaluationsByCategoryData = {
  body?: never;
  path: {
    /**
     * Project Id
     */
    project_id: string;
    /**
     * Category Id
     */
    category_id: string;
  };
  query?: never;
  url: '/projects/{project_id}/evaluation-categories/{category_id}/evaluations';
};

export type GetEvaluationsByCategoryErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetEvaluationsByCategoryError =
  GetEvaluationsByCategoryErrors[keyof GetEvaluationsByCategoryErrors];

export type GetEvaluationsByCategoryResponses = {
  /**
   * Response Getevaluationsbycategory
   * Successful Response
   */
  200: Array<EvaluationRead>;
};

export type GetEvaluationsByCategoryResponse =
  GetEvaluationsByCategoryResponses[keyof GetEvaluationsByCategoryResponses];

export type SimilaritySearchData = {
  body: SimilaritySearchRequest;
  path: {
    /**
     * Project Id
     */
    project_id: string;
  };
  query?: never;
  url: '/projects/{project_id}/similarity-search';
};

export type SimilaritySearchErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type SimilaritySearchError =
  SimilaritySearchErrors[keyof SimilaritySearchErrors];

export type SimilaritySearchResponses = {
  /**
   * Response Similaritysearch
   * Successful Response
   */
  200: Array<FileEmbeddingRead> | Array<FileContentReadWithChunkScore>;
};

export type SimilaritySearchResponse =
  SimilaritySearchResponses[keyof SimilaritySearchResponses];

export type GetEvaluationTemplatesData = {
  body?: never;
  path: {
    /**
     * Project Id
     */
    project_id: string;
  };
  query?: never;
  url: '/projects/{project_id}/evaluation-templates';
};

export type GetEvaluationTemplatesErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetEvaluationTemplatesError =
  GetEvaluationTemplatesErrors[keyof GetEvaluationTemplatesErrors];

export type GetEvaluationTemplatesResponses = {
  /**
   * Response Getevaluationtemplates
   * Successful Response
   */
  200: Array<EvaluationTemplateRead>;
};

export type GetEvaluationTemplatesResponse =
  GetEvaluationTemplatesResponses[keyof GetEvaluationTemplatesResponses];

export type CreateEvaluationTemplateData = {
  body: HttpEvaluationTemplateCreate;
  path: {
    /**
     * Project Id
     */
    project_id: string;
  };
  query?: never;
  url: '/projects/{project_id}/evaluation-templates';
};

export type CreateEvaluationTemplateErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type CreateEvaluationTemplateError =
  CreateEvaluationTemplateErrors[keyof CreateEvaluationTemplateErrors];

export type CreateEvaluationTemplateResponses = {
  /**
   * Successful Response
   */
  200: EvaluationTemplateRead;
};

export type CreateEvaluationTemplateResponse =
  CreateEvaluationTemplateResponses[keyof CreateEvaluationTemplateResponses];

export type DeleteEvaluationTemplateData = {
  body?: never;
  path: {
    /**
     * Project Id
     */
    project_id: string;
    /**
     * Evaluation Template Id
     */
    evaluation_template_id: string;
  };
  query?: never;
  url: '/projects/{project_id}/evaluation-templates/{evaluation_template_id}';
};

export type DeleteEvaluationTemplateErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type DeleteEvaluationTemplateError =
  DeleteEvaluationTemplateErrors[keyof DeleteEvaluationTemplateErrors];

export type DeleteEvaluationTemplateResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type UpdateEvaluationTemplateData = {
  body: HttpEvaluationTemplateUpdate;
  path: {
    /**
     * Project Id
     */
    project_id: string;
    /**
     * Evaluation Template Id
     */
    evaluation_template_id: string;
  };
  query?: never;
  url: '/projects/{project_id}/evaluation-templates/{evaluation_template_id}';
};

export type UpdateEvaluationTemplateErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type UpdateEvaluationTemplateError =
  UpdateEvaluationTemplateErrors[keyof UpdateEvaluationTemplateErrors];

export type UpdateEvaluationTemplateResponses = {
  /**
   * Successful Response
   */
  200: EvaluationTemplateRead;
};

export type UpdateEvaluationTemplateResponse =
  UpdateEvaluationTemplateResponses[keyof UpdateEvaluationTemplateResponses];

export type HealthHealthGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/health';
};

export type HealthHealthGetErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type HealthHealthGetError =
  HealthHealthGetErrors[keyof HealthHealthGetErrors];

export type HealthHealthGetResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type ClientOptions = {
  baseUrl: `${string}://${string}/api` | (string & {});
};
